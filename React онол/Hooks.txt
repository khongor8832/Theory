Hooks-c өмнөх React аппын асуудал 

1. Ямар нэгэн компонентод өөр боломж хэрхэн нэмэх вэ? 
Жн: тухайн үйлдэл хийдэг компонент байхад өөр энгийн зүйл хийлгэх гэхээр болохгүй байгаад байдаг. Тэгвэл тухайн компонентод дотор кодыг бичиж өгч болно аль эсвэл гадна талаар high Order компонент ажиглаж хийж болно. Гадуур нь бүрхээд дотор байгаа компонентодоо өөрийнхөө хийж чаддаг зүйлийг дамжуулдаг props-оор нь. 

Жн Гадна талаар бүрхэх App Component-д: Route -тэй ажиллах, 
                                        Redux Store-тэй ажиллах боломжтой болгохын тулд 
<Provider store={store}>
    <BrowserRouter>
       <App />
    </BrowserRouter>
   </Provider>,
Жн Дотор нь бичиж өгөх: connect гэдэг high order Component ашиглаж бичиж өгдөг. 
         export default connect(mapStateToProps, mapDisPatchToProps)(App);

-Глобал өгөгдлийн компонент хооронд дундаа ашиглах 
-Prop drilling асуудалаас зайлсхийх 
-Удирдлагыг нэг зүгт шилжүүлэх 
ийм байлгахын тулд REDUX ашиглах боловч олон нэмэлт файлтай ажиллах болно. Мөн өөр төлөвын менежментийг labrary байдаг.

2. Redux хийхээр - ойлгоход бэрх high order Radux-ын логикоос гадна дээр нь нэг Component нэмэхэд  1-action 1-reducer Тэгээд нэг компонент-той ажиллаж байхад тухайн компонент файл дээр ажиллаж байгаад action-руу нь үсрээл түүнээсээ reducer-руу үсрээл 3 4 файлын хооронд байнга нааш фаашаа шилжиж явдаг бөгөөд developer -ын цагааг хөмслөдөг. 

3. Класс компонентуудыг бичиж эхлэхэд хялбар энгийн эхэлдэг (Burger project )


Класс компонентууд minify хийгдэхдээ тааруу Hot reloading дээр найдваргүй байдаг. 
minify - Бидний бичсэн source кодыг webpack build хийхэд бүгдэнг нь жижиглээд шахаад хамгийн жижигхэн зай хэмнэхийн тулд интернэтээр хурдан явуулахын тулд хамгийн жижигхэн болгодог. Тэгвэл Класс компонент муу жижигрэдэг.

hot reloading буюу хадгалангуут browser дээр refresh хийгддэг. Тэрэн дээр буруу үйл ажиллагаа үзүүлэг байх нь байна. 

-Класс компонентуудыг ойлгоход, сурахад төвөгтэй байна.( this заагч, binding, амьдралын циклд захирагдах)

-Класс компонентууд ирээдүйд нэмж орж ирэх технологиудад саад хийж байна. 

2019 оны 2 сард гарсан React hooks эдгээр бүх асуудлуудыг шийдсэн. 

Hooks энгийн функц байж юм. Эхлэхдээ use гэж эхлэн.
Класс компонент-д байдаг бүх боломжийг функц компонентод оруулж өгч чадна. Мөн илүүгч бас чадна. 

Hooks нь зөвхөн функц компонентод ашиглагддаг байгаа. Дараах 3 боломжийг олгоно. 
    -компонентод нэмэлт чадварыг суулган. 
    -компонент дотор хоорондоо холбоотой кодуудыг нэг функц болгох боломжийг өгнө. 
    -компонент хооронд кодыг хуваалцан ашиглах (reuse)
Basic Hooks                 Additional hooks
-useState                   -useReducer
-useEffect                  -useCallback
-useContext                 -useMemo
                            -useRef
                            -useImperativeHandle
                            -useLayoutEffect
                            -useDebugValue

блокон хаалтаны нэг хаалтан дотор хийж өгнө